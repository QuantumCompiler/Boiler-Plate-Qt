#!/bin/bash

# Build and run script for Qt application using CMake

# Function to find the project root directory
find_project_root() {
    local current_dir="$(pwd)"
    local search_dir="$current_dir"
    
    # If script is called via symlink, start from current working directory
    # Otherwise, start from script directory
    if [ -L "${BASH_SOURCE[0]}" ]; then
        search_dir="$current_dir"
    else
        search_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        search_dir="$(dirname "$search_dir")"  # Go up one level from bin/
    fi
    
    # Search upward for CMakeLists.txt file
    while [ "$search_dir" != "/" ]; do
        if [ -f "$search_dir/CMakeLists.txt" ]; then
            echo "$search_dir"
            return 0
        fi
        search_dir="$(dirname "$search_dir")"
    done
    
    # If not found by going up, search in current directory and subdirectories
    local cmake_file_path
    cmake_file_path="$(find "$current_dir" -name "CMakeLists.txt" -type f 2>/dev/null | head -1)"
    if [ -n "$cmake_file_path" ]; then
        echo "$(dirname "$cmake_file_path")"
        return 0
    fi
    
    return 1
}

# Get the project directory
PROJECT_DIR="$(find_project_root)"
if [ $? -ne 0 ] || [ -z "$PROJECT_DIR" ]; then
    echo "Error: Could not find CMakeLists.txt file in current directory tree"
    echo "Make sure you're running this script from within the project directory"
    exit 1
fi

CMAKE_FILE="$PROJECT_DIR/CMakeLists.txt"
BUILD_DIR="$PROJECT_DIR/build"

# Function to display usage
show_usage() {
    echo "Usage: $0 [OPTION]"
    echo "Options:"
    echo "  -b    Build the application and clean old build"
    echo "  -c    Clean build files only"
    echo "  -h    Show this help message"
    echo "  -r    Run the application"
    echo "  -x    Build and run the application"
    echo "  -d    Build in debug mode"
    echo "  -rel  Build in release mode"
}

# Function to build the application
build_application() {
    local build_type="${1:-Debug}"  # Default to Debug if not specified
    
    echo "Building Qt application with CMake..."
    echo "Project directory: $PROJECT_DIR"
    echo "CMakeLists.txt location: $CMAKE_FILE"
    echo "Build type: $build_type"

    # Check if CMakeLists.txt exists
    if [ ! -f "$CMAKE_FILE" ]; then
        echo "Error: CMakeLists.txt not found at $CMAKE_FILE"
        exit 1
    fi

    # Create build directory if it doesn't exist
    if [ ! -d "$BUILD_DIR" ]; then
        echo "Creating build directory..."
        mkdir -p "$BUILD_DIR"
    fi

    # Change to build directory
    cd "$BUILD_DIR"

    # Configure with CMake
    echo "Running cmake configure..."
    cmake -DCMAKE_BUILD_TYPE="$build_type" ..
    if [ $? -ne 0 ]; then
        echo "Error: cmake configure failed"
        exit 1
    fi

    # Build the application
    echo "Building application..."
    cmake --build .
    if [ $? -ne 0 ]; then
        echo "Error: cmake build failed"
        exit 1
    fi

    echo "Build completed successfully!"
    echo "Executable location: $BUILD_DIR/main.app"
}

# Function to clean the build files
clean_build() {
    echo "Cleaning build files in: $BUILD_DIR"
    
    if [ -d "$BUILD_DIR" ]; then
        cd "$BUILD_DIR"
        if [ -f "Makefile" ]; then
            make clean
        fi
        
        # Remove the entire build directory for a complete clean
        cd "$PROJECT_DIR"
        rm -rf "$BUILD_DIR"
        rm Makefile
        echo "Build directory removed successfully!"
    else
        echo "Build directory does not exist, nothing to clean."
    fi
}

# Function to run the application
run_application() {
    echo "Running Qt application..."
    
    # Look for the executable
    EXECUTABLE="$BUILD_DIR/main.app/Contents/MacOS/main"
    
    if [ ! -f "$EXECUTABLE" ]; then
        echo "Error: Executable not found at $EXECUTABLE"
        echo "Make sure you have built the application first using: $0 -b"
        exit 1
    fi
    
    echo "Starting application: $EXECUTABLE"
    
    # Change to build directory and run
    cd "$BUILD_DIR"
    open main.app
}

# Parse command line arguments
if [ $# -eq 0 ]; then
    echo "Error: No arguments provided"
    show_usage
    exit 1
fi

case "$1" in
    -b)
        build_application "Debug"
        ;;
    -d)
        build_application "Debug"
        ;;
    -rel)
        build_application "Release"
        ;;
    -c)
        clean_build
        ;;
    -h|--help)
        show_usage
        ;;
    -r)
        run_application
        ;;
    -x)
        build_application "Debug" && run_application
        ;;
    *)
        echo "Error: Unknown option '$1'"
        show_usage
        exit 1
        ;;
esac
